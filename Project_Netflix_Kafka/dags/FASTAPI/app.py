# Importation des biblioth√®ques n√©cessaires
import uvicorn  # Pour d√©marrer le serveur FastAPI
from fastapi import FastAPI  # Pour cr√©er l'application FastAPI
from fastapi import HTTPException  # Pour g√©rer les exceptions HTTP
import joblib  # Pour charger des mod√®les sauvegard√©s au format pickle
import pandas as pd  # Pour manipuler les donn√©es sous forme de DataFrame
from io import BytesIO  # Pour la gestion des flux de donn√©es en m√©moire

# Description de l'API (sera affich√©e dans la documentation interactive)
description = """
Cette API Netflix vous permet de faire des recommandations de films pour un utilisateur donn√©.

## Fonctionnalit√©s disponibles

* `/suggested_movies` : Obtenez les meilleures suggestions de films pour un utilisateur donn√©.
"""

# M√©tadonn√©es pour la documentation de l'API
tags_metadata = [
    {
        "name": "Pr√©dictions",
        "description": "Utilisez cet endpoint pour obtenir des pr√©dictions"
    }
]

# Cr√©ation de l'application FastAPI avec des informations suppl√©mentaires
app = FastAPI(
    title="üë®‚Äçüíº API_Netflix_Reco",  # Titre affich√© dans la documentation
    description=description,  # Description de l'API
    version="0.1",  # Version actuelle de l'API
    openapi_tags=tags_metadata  # M√©tadonn√©es pour les tags
)

# Chargement du mod√®le de pr√©diction sauvegard√©
model = joblib.load('../dags/FASTAPI/model/model.pkl')  # Charger le mod√®le √† partir du chemin indiqu√©

# D√©finition de l'endpoint racine (`/`)
@app.get("/")
async def index():
    """
    Endpoint par d√©faut qui affiche un message de bienvenue.
    """
    message = "Bonjour tout le monde ! Ce point d'acc√®s (`/`) est le plus simple et par d√©faut. Pour en savoir plus, consultez la documentation de l'API √† `/docs`."
    return message  # Retourne un message de bienvenue

# Endpoint pour obtenir les suggestions de films
@app.get("/suggested_movies")
async def look_prediction(Cust_Id):
    """
    Retourne les 10 meilleurs films recommand√©s pour un utilisateur donn√©.
    """
    # Chargement des donn√©es de recommandation depuis un fichier CSV
    df = pd.read_csv("../dags/FASTAPI/data/data_reco.csv", index_col=0)
    
    # Calcul de l'estimation des scores pour chaque film en utilisant le mod√®le
    df['Estimate_Score'] = df['Movie_Id'].apply(lambda x: model.predict(int(Cust_Id), x).est)
    
    # Tri des films par score estim√© (du plus √©lev√© au plus faible)
    df = df.sort_values('Estimate_Score', ascending=False)
    
    # S√©lection des 10 meilleurs films
    best_movie = df.head(10)
    
    # Retourne les r√©sultats sous forme de dictionnaire
    return best_movie.to_dict()

# Ex√©cution de l'application FastAPI
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=4000)  # D√©finition du serveur web pour ex√©cuter l'application `app`
    # `host="0.0.0.0"` permet √† l'application d'√™tre accessible depuis n'importe quelle adresse IP.
    # `port=4000` indique le port sur lequel le serveur √©coute les requ√™tes.
